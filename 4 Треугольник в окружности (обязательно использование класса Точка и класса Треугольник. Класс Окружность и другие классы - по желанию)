data class Point(val x: Double, val y: Double)
data class Triangle(val a: Point, val b: Point, val c: Point)

fun main() {
    println("Введите координаты вершин треугольника:")
    val a = readPoint("A")
    val b = readPoint("B")
    val c = readPoint("C")
    val triangle = Triangle(a, b, c)

    val (center, radius) = circumcenter(triangle)

    println("Центр описанной окружности: ($center)")
    println("Радиус: $radius")
}

fun readPoint(name: String): Point {
    while (true) {
        try {
            print("Введите x для точки $name: ")
            val x = readLine()!!.toDouble()
            print("Введите y для точки $name: ")
            val y = readLine()!!.toDouble()
            return Point(x, y)
        } catch (e: NumberFormatException) {
            println("Ошибка: введите число.")
        }
    }
}

fun circumcenter(t: Triangle): Pair<Point, Double> {
    val ax = t.b.x - t.a.x
    val ay = t.b.y - t.a.y
    val bx = t.c.x - t.a.x
    val by = t.c.y - t.a.y

    val t1 = ax * (t.a.x + t.b.x) + ay * (t.a.y + t.b.y)
    val t2 = bx * (t.a.x + t.c.x) + by * (t.a.y + t.c.y)

    val d = 2 * (ax * (t.c.y - t.b.y) - ay * (t.c.x - t.b.x))

    if (d == 0.0) {
        throw ArithmeticException("Треугольник вырожден: точки лежат на одной прямой.")
    }

    val ux = (by * t1 - ay * t2) / d
    val uy = (ax * t2 - bx * t1) / d

    val center = Point(ux, uy)
    val radius = distance(center, t.a)

    return Pair(center, radius)
}

fun distance(p1: Point, p2: Point): Double {
    val dx = p2.x - p1.x
    val dy = p2.y - p1.y
    return kotlin.math.sqrt(dx * dx + dy * dy)
}
